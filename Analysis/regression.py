from __future__ import print_function

import os
import pandas as pd
import numpy as np
import random

import statsmodels.api as sm
import statsmodels.formula.api as smf

from sklearn import linear_model
from sklearn.linear_model import LinearRegression


def random_model(data =     pd.read_csv('../Data/mississippi/pool82014-10-02cleaned.csv',
                index_col='FID', thousands=',', parse_dates=['time'])):
    """
    This function selects a random dependent variable y and 4 random
    covariates of type float64 froma data set for a regression model
    """

    # Find variables in the data set with dtype float64
    vars = list(data.columns[data.dtypes == 'float64'])

    # Select a random dependent variable y
    y = random.sample(vars, 1)[0]

    # Select 4 random independent variables x1, x2, x3, x4
    vars.remove(y)
    randomVars = random.sample(vars, 4)

    # Define the formula as a string
    formulaStr = '%s ~ %s + %s + %s + %s' %(y, randomVars[0], randomVars[1], randomVars[2], randomVars[3])

    return (data, y, randomVars, formulaStr);


def compare_OLS(data = pd.read_csv('../Data/mississippi/pool82014-10-02cleaned.csv',
                index_col='FID', thousands=',', parse_dates=['time'])):
    """
    This function runs an ordinary least squares regression on data
    generated by the random_model function, using both the statsmodels
    and scikit-learn packages, for comparison purposes.
    """

    # Generate a random model, using the random_model() function
    rmod = random_model(data)
    dat = rmod[0]  # the imported data from random_model

    # Run a statsmodels OLS regression on y vs 4 random covariates
    print('statsmodels OLS regression on \n %s' % rmod[3])
    mod1 = smf.ols(formula = str(rmod[3]), data=dat).fit()
    # print('Parameters: ', mod1.params)
    # print('R2: ', mod1.rsquared)
    # print('AIC: ', mod1.aic)
    # print('BIC: ', mod1.bic)
    print('\n', mod1.summary(), '\n')

    # Run a scikit-learn OLS regression on the same model
    print('\n', scikit-learn OLS regression on \n %s' % rmod[3], '\n')
    y = dat[rmod[1]]
    x = dat[rmod[2]]
    mod2 = LinearRegression()
    mod2.fit(x, y)
    print(mod2.intercept_)
    print(mod2.coef_)
    print(mod2.score(x, y))
